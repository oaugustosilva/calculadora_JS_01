Como primeiro passo, devemos criar o repositório no GitHub.

Também temos que abrir um terminal e digitar git init.

Depois precisamos navegar através do comando cd até onde entrar na pasta onde o repositório foi criado.

Para adicionar um arquivo, ou mais, devemos digitar: git add nomedoarquivo . Ou então git add -a para adicionar todos arquivos.

Depois de adicionados, devemos commitar eles, ou seja, salvá-los: git commit -m "escrever a mensagem resumo". 

Depois de commitado, podemos enviar nosso código para o repositório através do comando git push nomedoarquivo ou então git push -a

Também temos o git pull, que serve para atualizar os arquivos na máquina de acordo com o que está upado no GitHub.

Caso a gente queira copiar um repositório que está upado no GitHub, por exemplo, entramos para um time e precisamos baixar
os arquivos... podemos utilizar o git clone https://........ Para conseguir o link do repositório, devemos ir na página dele,
clicar em code (botão na direita) e copiar o código https dali.

Para deletar um arquivo do MONITORAMENTO, utilizamos o comando git rm nomedoarquivo. Ele será excluido da pasta.

Para saber o histórico de commits/modificações, podemos usar o comando git log. Ele vai imprimir na tela desde o commit mais recente até o primeiro dado.
Para sair do log basta apertarmos q.

Podemos mover ou renomear um arquivo através do comando git mv nomedoarquivo localnovo ...
Para renomear o arquivo, fazemos git mv caminho/nomedoarquivo.extensao caminho/novonomedoarquivo.extensao

Caso a gente modifique um arquivo, e não queira que essa modificação seja upada no repositório, podemos usar o comando checkout caminho/nomedoarquivo.extensao
Exemplo: modificamos um arquivo css, alterando a fonte de todos os parágrafos, porém, fizemos errado e desejamos retornar ao original, podemos utilizar o checkout.
Porém, isso deve ser feito antes do COMMIT. Desta forma, é como se a modificação no arquivo css não tivesse sido feita.

Podemos ignorar arquivos do projeto ao upar para repositório. Devemos inserir um arquivo chamado .gitignore na raiz do projeto, e nele podemos inserir todos os arquivos
que não devem entrar no versionamento, como arquivos gerados automaticamente ou arquivos com conteúdo sensível.
Um ponto de atenção é que os arquivos primeiro precisam ser inseridos no gitignore para depois serem criados na pasta, pois o github já vai puxando automaticamente na working tree.
No caso do exemplo, estou ignorando o arquivo d.txt e a pasta node_modules todos os arquivos, representados pelo *.