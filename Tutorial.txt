Como primeiro passo, devemos criar o repositório no GitHub.

Também temos que abrir um terminal e digitar git init.

Depois precisamos navegar através do comando cd até onde entrar na pasta onde o repositório foi criado.

Para adicionar um arquivo, ou mais, devemos digitar: git add nomedoarquivo . Ou então git add -a para adicionar todos arquivos.

Depois de adicionados, devemos commitar eles, ou seja, salvá-los: git commit -m "escrever a mensagem resumo". 

Depois de commitado, podemos enviar nosso código para o repositório através do comando git push nomedoarquivo ou então git push -a

Também temos o git pull, que serve para atualizar os arquivos na máquina de acordo com o que está upado no GitHub.

Caso a gente queira copiar um repositório que está upado no GitHub, por exemplo, entramos para um time e precisamos baixar
os arquivos... podemos utilizar o git clone https://........ Para conseguir o link do repositório, devemos ir na página dele,
clicar em code (botão na direita) e copiar o código https dali.

Para deletar um arquivo do MONITORAMENTO, utilizamos o comando git rm nomedoarquivo. Ele será excluido da pasta.

Para saber o histórico de commits/modificações, podemos usar o comando git log. Ele vai imprimir na tela desde o commit mais recente até o primeiro dado.
Para sair do log basta apertarmos q.

Podemos mover ou renomear um arquivo através do comando git mv nomedoarquivo localnovo ...
Para renomear o arquivo, fazemos git mv caminho/nomedoarquivo.extensao caminho/novonomedoarquivo.extensao

Caso a gente modifique um arquivo, e não queira que essa modificação seja upada no repositório, podemos usar o comando checkout caminho/nomedoarquivo.extensao
Exemplo: modificamos um arquivo css, alterando a fonte de todos os parágrafos, porém, fizemos errado e desejamos retornar ao original, podemos utilizar o checkout.
Porém, isso deve ser feito antes do COMMIT. Desta forma, é como se a modificação no arquivo css não tivesse sido feita.

Podemos ignorar arquivos do projeto ao upar para repositório. Devemos inserir um arquivo chamado .gitignore na raiz do projeto, e nele podemos inserir todos os arquivos
que não devem entrar no versionamento, como arquivos gerados automaticamente ou arquivos com conteúdo sensível.
Um ponto de atenção é que os arquivos primeiro precisam ser inseridos no gitignore para depois serem criados na pasta, pois o github já vai puxando automaticamente na working tree.
No caso do exemplo, estou ignorando o arquivo d.txt e a pasta node_modules todos os arquivos, representados pelo *.

Tem o git reset, que serve para resetar TODAS as mudanças feitas no branch, inclusive as commitadas e pendentes. Geralmente é utilizado junto com a flag --hard.
Tomar cuidado com esse comando, pois reseta todo trabalho feito. Porém, esse comando serve para resetar todas modificações feitas ANTES DO PUSH.
O comando é git reset --hard branch . Exemplo: git reset --hard origin/master.

**************************************************************************************
Branch é a forma que o git separa as versões dos projetos.
Quando um projeto é criado, ele inicia na branch MASTER, estamos trabalhando nela até o momento.
Geralmente, cada nova feature de um projeto fica em um branch separado.
Após a finalização das alterações, os branchs são unidos para ter código-fonte final.

Para visualizar os branchs utilizamos comando git branch.
Para criar um branch novo, utilizamos comando git branch <nome>.
Cuidar para sempre criar um novo branch em relação ao projeto consolidado, ou seja, ao master. Pois criando um branch derivando de outro branch, corremos risco
de não utilizar a versão consolidada do projeto.

Podemos deletar Branchs através do comando git branch -d nomedobranch. Geralmente não se deleta branchs, se arquiva para acervo técnico.

Podemos mudar para outro branch utilizando o comando git checkout -b <nome>, ou até mesmo criar um branch novo através deste comando. 
Este comando também é utilizado para dispensar mudanças de um arquivo, ou seja, sair de um branch e entrar em outro sem salvar o que foi feito (salvar = commitar).
Alterando o branch, podemos perder alterações que não foram commitadas junto, TOMAR CUIDADO!!
Para criar um branch (uma cópia da branch) devemos sempre fazer uma cópia em relação à MASTER, para evitar copiar um branch que já é cópia.

Para unir branches usamos o comando git merge <nome>. Normalmente é por meio dele que recebemos as atualizações de outros devs.
Por exemplo: temos um branch master (código fonte), e fizemos um novo branch para criar uma nova funcionalidade, e após criada e testada e aprovada, queremos
colocar ela no master. Para isso, entramos no branch master e utilizamos o código git merce <nome>.... aí vai aparecer as modificações, e depois devemos dar
um git push, pois o branch secundário está à frente do master.

Podemos salvar as modificações atuais para prosseguir com uma outra abordagem de solução e não perder o código. O comando para isso é git stash.
Após o comando o branch será resetado para sua versão de acordo com o repo. Supondo que tenhamos feito um código e lá na frente percebemos que adotamos
o caminho errado. Podemos usar o comando stash, e esse comando vai para uma lixeira, e se quisermos resgatá-lo depois, é possível.
Podemos verificar as stashs criadas pelo comando git stash list.
Também podemos recuperar a stash com o comando git stash <nome>
Desta maneira, podemos continuar de onde paramos com os arquivos adicionadas na stash.
Para limpar totalmente as stash de um branch podemos utilizar o comando git stash clear. Casjo seja necessário deletar uma stash específica,
podemos utilizar o git stash drop <nome>.

Podemos criar "marcos" no nosso código, chamados de TAGs.
Podemos criar tags nos branches por meio do comando git tag -a <nome> -m "<msg>".
A tag é diferente do stash, serve como um checkpoint de um branch. É utilizada para demarcar estágios do desenvolvimento de algum recurso.
Podemos verificar uma tag com o comando git show <nome>. Ou podemos trocar de tags com o comando git checkout <nome.
Desta maneira, podemos retroceder ou avançar em checkpoints de um branch.
Na prática: eu tenho um código, escrevi até uma parte... aí eu criei a tag v1.0.. depois segui escrevendo mais alguma coisa, e criei a tag v2.0
e assim por diante... quando eu quiser ver as alterações do código entre tags, vai ser em relação a tag anterior criada.
Eu também posso usar o checkout para ir para o código da versão que eu quiser... podemos navegar entre as versões dos códigos através das tags.

Podemos enviar e compartilhar TAGs no GitHub. As tags podem ser enviadas para repositório de código, sendo compartilhada entre devs.
O comando é git push origin <nome>
Ou, se você quiser enviar mais tags: git push origin --tags
*******************************************************************************************
Compartilhamento e atualização.

Encontrar Branches
Branches novos são criados a todo tempo e o seu git pode não estar mapeando eles. Com o comando git fetch você é atualizado de todos
os branches e tags que ainda não estão reconhecidos por você. Este comando é útil para utilizar o branch de algum outro dev
do time, por exemplo.
Vamos supor que tenhamos dois devs na empresa: cada um tem o seu branch, porém, o dev B quer mexer num branch do dev A, porém,
o git do B não está mapeando o branch do A, então utiliza o fetch, pega o branch do A, faz as modificações, commita e dá um push.
Posteriormente, o A, no seu branch, vai dar um git pull e vai receber essas modificações feitas pelo B no seu branch.

GIT PULL
O comando git pull serve para recebermos atualizações do repositório remoto. Cada branch pode ser atualizado com o git pull.
Utilizamos para atualizar a master do repo como também quando trabalhamos em conjunto e queremos receber atualizações de um dev.

GIT PUSH
O comando git push faz o inverso do pull, ele envia as alterações para o repo remoto.
Serve também para enviar atualizações de um branch específico para outro dev, ou quando terminamos uma tarefa e precisamos enviar ao repo.
Importante evidenciar que os arquivos enviados pelo push serão apenas os commitados. Os que não estão trackeados ou commitados não serão upados.

GIT REMOTE
Com o git remote podemos fazer algumas ações como: adicionar um repo para trackear ou remover;
Quando criamos um repo remoto, adicionamos ele ao git com git remote add origin <link>

SUBMÓDULOS
Submódulo é a maneira que temos de possuir dois ou mais projetos em um só repositório.
Podemos adicionar uma dependência ao nosso projeto atual, porém, mantendo suas estruturas separadas.
Para adicionar um Submódulo utilizamos o comando git submodule add <repo>
Para verificar os Submódulos o comando é gut submodule.
Esse é utilizado para quando temos, por exemplo, uma biblioteca que vamos usar no nosso código, mas que não queremos incorporá-la no
código.
É um projeto dentro de outro projeto.
Para atualizar um submodulo, primeiro devemos commitar as mudanças, e para enviar para o repo do submódulo, Utilizamos
git push --recurse-submodules=on-demand
Este fluxo fará a atualização apenas do submódulo.
********************************************************************
Análises e inspeção
O comando git show nos dá diversas informações úteis.
Ele nos dá informações do branch atual e também seus commits. As modificações de arquivos entre cada commit também
são exibidas. Podemos exibir as informações de tags também com: git show <tag>.

Exibindo diferenças
O comando git diff serve para exibir as diferenças de um branch. Quando utilizado as diferenças do branch atual com o remoto
serão exibidas no terminal. Podemos também verificar a diferença entre arquivos: git diff <arquivo> <arquivo_b>

Log resumido
O comando git shortlog nos dá um log resumido do projeto (repositório). Cada commit será unido por nome do autor. Podemos saber quais commits
foram enviados ao projeto e por quem
*****************************************************************
Adminstração de repositórios

GIT CLEAN
O comando git clean vai verificar e limpar arquivos que não estão sendo trackeados, ou seja, todos que você não utilizou git add.
Utilizado para arquivos que são gerados automaticamente, por exemplo, e atrapalham a visualização do que é realmente importante.

GIT GC
O comando git gc é uma abreviação para garbage collector. Ele identifica arquivos que não são mais necessários e os exclui.
Isso fará com o que o repositório seja otimizado em questões de performance.

GIT FSCK
O comando git fsck é uma abreviação para File System ChecK, essa instrução verifica a integridade de arquivos e sua
conectividade. Verificando assim possíveis corrupções em arquivos. Comando de rotina, utilizado para ver se está tudo
certo com nossos arquivos.  

REFLOG
O git reflog vai mapear todos os seus passos no repositório, até uma mudança de branch é inserida neste log.
Já o git log, que vimos anteriormente, apenas armazena os commits de um branch. Os reflogs ficam salvos até expirar, o tempo
de expiração padrão é de 30 dias.
Vai aparecer um extrato de todas as movimentações feitas no repositório, e podemos usar o comando git reset --hard <iddomovimento> para
retornar à aquela movimentação, como se fosse um checkpoint.

Transformando o repo para arquivo
Com o comando git archive podemos transformar o repositório em um arquivo compactado, por exemplo. O comando é:
git archive --format zip --output master_files.zip master
E então a master vai estar zipada no arquivo master_files.zip.

A importância do commit
Problema: commits sem sentido atrapalham o projeto.
Precisamos padronizar os commits para que o projeto cresça de forma saudável também no versionamento, isso ajuda em:
*Review do Pull Request;
*Melhoria dos log em git log;
*Manutenção do projeto (voltar código, por exemplo).

Para o desenvolvedor não precisar ficar dando vários commits e poluir o log código, existe o private branche, que é um branch
privado, e que podemos ficar dando vários commits, mas quando o dev finalizar a funcionalidade, pode dar o commit oficial
para o projeto, ou seja, o private branch não vai ser compartilhado no repositório.
Ao fim da solução do problema, podemos fazer um rebase. O comando será: git rebase <atual> <funcionalidade> -i;
Escolhemos os branches para excluir (squash) e renomar com reword.

Boas práticas de mensagens de commit:
*Separar assunto do corpo da mensagem;
*Assunto com no máximo 50 caracteres;
*Assunto com letra inicial maiúscula;
*Corpo com no máximo 72 caracteres;
*Explicar o por que e como do commit, e não como o código foi escrito.
